var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { constants } from '@cloudbase/utilities';
import { getSdkName } from '../constants/common';
var ERRORS = constants.ERRORS;
var components = {};
export function registerComponent(app, component) {
    var name = component.name, namespace = component.namespace, entity = component.entity, injectEvents = component.injectEvents;
    if (components[name] || (namespace && app[namespace])) {
        throw new Error("[" + getSdkName() + "][" + ERRORS.INVALID_OPERATION + "]There were multiple attempts to register component " + name + ".");
    }
    components[name] = component;
    if (namespace) {
        app.prototype[namespace] = entity;
    }
    else {
        deepExtend(app.prototype, entity);
    }
    if (injectEvents) {
        var bus = injectEvents.bus, events = injectEvents.events;
        if (!bus || !events || events.length === 0) {
            return;
        }
        var originCallback_1 = app.prototype.fire || function () { };
        if (!app.prototype.events) {
            app.prototype.events = {};
        }
        var originEvents = app.prototype.events || {};
        if (originEvents[name]) {
            app.prototype.events[name].events = __spreadArrays(app.prototype.events[name].events, events);
        }
        else {
            app.prototype.events[name] = { bus: bus, events: events };
        }
        app.prototype.fire = function (eventName, data) {
            originCallback_1(eventName, data);
            for (var name_1 in this.events) {
                var _a = this.events[name_1], bus_1 = _a.bus, eventList = _a.events;
                if (eventList.includes(eventName)) {
                    bus_1.fire(eventName, data);
                    break;
                }
            }
        };
    }
}
function deepExtend(target, source) {
    if (!(source instanceof Object)) {
        return source;
    }
    switch (source.constructor) {
        case Date:
            var dateValue = source;
            return new Date(dateValue.getTime());
        case Object:
            if (target === undefined) {
                target = {};
            }
            break;
        case Array:
            target = [];
            break;
        default:
            return source;
    }
    for (var key in source) {
        if (!source.hasOwnProperty(key)) {
            continue;
        }
        target[key] = deepExtend(target[key], source[key]);
    }
    return target;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYnMvY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDakQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXpDLElBQUEsTUFBTSxHQUFLLFNBQVMsT0FBZCxDQUFlO0FBRTdCLElBQU0sVUFBVSxHQUEyQixFQUFFLENBQUM7QUFFOUMsTUFBTSxVQUFVLGlCQUFpQixDQUFDLEdBQU8sRUFBQyxTQUE2QjtJQUM3RCxJQUFBLElBQUksR0FBc0MsU0FBUyxLQUEvQyxFQUFFLFNBQVMsR0FBMkIsU0FBUyxVQUFwQyxFQUFFLE1BQU0sR0FBbUIsU0FBUyxPQUE1QixFQUFFLFlBQVksR0FBSyxTQUFTLGFBQWQsQ0FBZTtJQUU1RCxJQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBRSxDQUFDLFNBQVMsSUFBRSxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBQztRQUMvQyxNQUFNLElBQUksS0FBSyxDQUFDLE1BQUksVUFBVSxFQUFFLFVBQUssTUFBTSxDQUFDLGlCQUFpQiw0REFBdUQsSUFBSSxNQUFHLENBQUMsQ0FBQztLQUM5SDtJQUVELFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUM7SUFFN0IsSUFBRyxTQUFTLEVBQUM7UUFDVixHQUFXLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztLQUM1QztTQUFJO1FBQ0gsVUFBVSxDQUFFLEdBQVcsQ0FBQyxTQUFTLEVBQUMsTUFBTSxDQUFDLENBQUM7S0FDM0M7SUFDRCxJQUFHLFlBQVksRUFBQztRQUNOLElBQUEsR0FBRyxHQUFhLFlBQVksSUFBekIsRUFBRSxNQUFNLEdBQUssWUFBWSxPQUFqQixDQUFrQjtRQUNyQyxJQUFHLENBQUMsR0FBRyxJQUFFLENBQUMsTUFBTSxJQUFFLE1BQU0sQ0FBQyxNQUFNLEtBQUcsQ0FBQyxFQUFDO1lBQ2xDLE9BQU07U0FDUDtRQUNELElBQU0sZ0JBQWMsR0FBSSxHQUFXLENBQUMsU0FBUyxDQUFDLElBQUksSUFBSSxjQUFXLENBQUMsQ0FBQztRQUNuRSxJQUFHLENBQUUsR0FBVyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUM7WUFDL0IsR0FBVyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1NBQ3BDO1FBQ0QsSUFBTSxZQUFZLEdBQVksR0FBVyxDQUFDLFNBQVMsQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDO1FBQ2pFLElBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFDO1lBQ25CLEdBQVcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sa0JBQVEsR0FBVyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFJLE1BQU0sQ0FBQyxDQUFDO1NBQ3hHO2FBQUk7WUFDRixHQUFXLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFDLEdBQUcsS0FBQSxFQUFDLE1BQU0sUUFBQSxFQUFDLENBQUM7U0FDcEQ7UUFDQSxHQUFXLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFTLFNBQWdCLEVBQUMsSUFBUztZQUMvRCxnQkFBYyxDQUFDLFNBQVMsRUFBQyxJQUFJLENBQUMsQ0FBQztZQUMvQixLQUFJLElBQU0sTUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUM7Z0JBQ3RCLElBQUEsS0FBNEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFJLENBQUMsRUFBM0MsS0FBRyxTQUFBLEVBQVMsU0FBUyxZQUFzQixDQUFDO2dCQUNwRCxJQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUM7b0JBQy9CLEtBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFDLElBQUksQ0FBQyxDQUFDO29CQUN6QixNQUFNO2lCQUNQO2FBQ0Y7UUFDSCxDQUFDLENBQUE7S0FDRjtBQUNILENBQUM7QUFFRCxTQUFTLFVBQVUsQ0FBQyxNQUFVLEVBQUMsTUFBVTtJQUN2QyxJQUFJLENBQUMsQ0FBQyxNQUFNLFlBQVksTUFBTSxDQUFDLEVBQUU7UUFDL0IsT0FBTyxNQUFNLENBQUM7S0FDZjtJQUVELFFBQVEsTUFBTSxDQUFDLFdBQVcsRUFBRTtRQUMxQixLQUFLLElBQUk7WUFDUCxJQUFNLFNBQVMsR0FBRyxNQUFjLENBQUM7WUFDakMsT0FBTyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUN2QyxLQUFLLE1BQU07WUFDVCxJQUFJLE1BQU0sS0FBSyxTQUFTLEVBQUU7Z0JBQ3hCLE1BQU0sR0FBRyxFQUFFLENBQUM7YUFDYjtZQUNELE1BQU07UUFDUixLQUFLLEtBQUs7WUFDUixNQUFNLEdBQUcsRUFBRSxDQUFDO1lBQ1osTUFBTTtRQUNSO1lBQ0UsT0FBTyxNQUFNLENBQUM7S0FDakI7SUFDRCxLQUFLLElBQU0sR0FBRyxJQUFJLE1BQU0sRUFBRTtRQUN4QixJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUMvQixTQUFTO1NBQ1Y7UUFDRCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUNuRDtJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBLViB9IGZyb20gJ0BjbG91ZGJhc2UvdHlwZXMnO1xuaW1wb3J0IHsgSUNsb3VkYmFzZUNvbXBvbmVudCB9IGZyb20gJ0BjbG91ZGJhc2UvdHlwZXMvY29tcG9uZW50JztcbmltcG9ydCB7IGNvbnN0YW50cyB9IGZyb20gJ0BjbG91ZGJhc2UvdXRpbGl0aWVzJztcbmltcG9ydCB7IGdldFNka05hbWUgfSBmcm9tICcuLi9jb25zdGFudHMvY29tbW9uJztcblxuY29uc3QgeyBFUlJPUlMgfSA9IGNvbnN0YW50cztcblxuY29uc3QgY29tcG9uZW50czpLVjxJQ2xvdWRiYXNlQ29tcG9uZW50PiA9IHt9O1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJDb21wb25lbnQoYXBwOmFueSxjb21wb25lbnQ6SUNsb3VkYmFzZUNvbXBvbmVudCl7XG4gIGNvbnN0IHsgbmFtZSwgbmFtZXNwYWNlLCBlbnRpdHksIGluamVjdEV2ZW50cyB9ID0gY29tcG9uZW50O1xuICAvLyDkuI3lhYHorrjph43lpI3ms6jlhozmiJblkb3lkI3nqbrpl7Tph43lkI1cbiAgaWYoY29tcG9uZW50c1tuYW1lXXx8KG5hbWVzcGFjZSYmYXBwW25hbWVzcGFjZV0pKXtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFske2dldFNka05hbWUoKX1dWyR7RVJST1JTLklOVkFMSURfT1BFUkFUSU9OfV1UaGVyZSB3ZXJlIG11bHRpcGxlIGF0dGVtcHRzIHRvIHJlZ2lzdGVyIGNvbXBvbmVudCAke25hbWV9LmApO1xuICB9XG5cbiAgY29tcG9uZW50c1tuYW1lXSA9IGNvbXBvbmVudDtcblxuICBpZihuYW1lc3BhY2Upe1xuICAgIChhcHAgYXMgYW55KS5wcm90b3R5cGVbbmFtZXNwYWNlXSA9IGVudGl0eTtcbiAgfWVsc2V7XG4gICAgZGVlcEV4dGVuZCgoYXBwIGFzIGFueSkucHJvdG90eXBlLGVudGl0eSk7XG4gIH1cbiAgaWYoaW5qZWN0RXZlbnRzKXtcbiAgICBjb25zdCB7IGJ1cywgZXZlbnRzIH0gPSBpbmplY3RFdmVudHM7XG4gICAgaWYoIWJ1c3x8IWV2ZW50c3x8ZXZlbnRzLmxlbmd0aD09PTApe1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IG9yaWdpbkNhbGxiYWNrID0gKGFwcCBhcyBhbnkpLnByb3RvdHlwZS5maXJlIHx8IGZ1bmN0aW9uKCl7fTtcbiAgICBpZighKGFwcCBhcyBhbnkpLnByb3RvdHlwZS5ldmVudHMpe1xuICAgICAgKGFwcCBhcyBhbnkpLnByb3RvdHlwZS5ldmVudHMgPSB7fTtcbiAgICB9XG4gICAgY29uc3Qgb3JpZ2luRXZlbnRzOktWPGFueT4gPSAoYXBwIGFzIGFueSkucHJvdG90eXBlLmV2ZW50cyB8fCB7fTtcbiAgICBpZihvcmlnaW5FdmVudHNbbmFtZV0pe1xuICAgICAgKGFwcCBhcyBhbnkpLnByb3RvdHlwZS5ldmVudHNbbmFtZV0uZXZlbnRzID0gWy4uLihhcHAgYXMgYW55KS5wcm90b3R5cGUuZXZlbnRzW25hbWVdLmV2ZW50cywuLi5ldmVudHNdO1xuICAgIH1lbHNle1xuICAgICAgKGFwcCBhcyBhbnkpLnByb3RvdHlwZS5ldmVudHNbbmFtZV0gPSB7YnVzLGV2ZW50c307XG4gICAgfVxuICAgIChhcHAgYXMgYW55KS5wcm90b3R5cGUuZmlyZSA9IGZ1bmN0aW9uKGV2ZW50TmFtZTpzdHJpbmcsZGF0YT86YW55KXtcbiAgICAgIG9yaWdpbkNhbGxiYWNrKGV2ZW50TmFtZSxkYXRhKTtcbiAgICAgIGZvcihjb25zdCBuYW1lIGluIHRoaXMuZXZlbnRzKXtcbiAgICAgICAgY29uc3QgeyBidXMsIGV2ZW50czpldmVudExpc3QgfSA9IHRoaXMuZXZlbnRzW25hbWVdO1xuICAgICAgICBpZihldmVudExpc3QuaW5jbHVkZXMoZXZlbnROYW1lKSl7XG4gICAgICAgICAgYnVzLmZpcmUoZXZlbnROYW1lLGRhdGEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRlZXBFeHRlbmQodGFyZ2V0OmFueSxzb3VyY2U6YW55KTpLVjxhbnk+e1xuICBpZiAoIShzb3VyY2UgaW5zdGFuY2VvZiBPYmplY3QpKSB7XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIHN3aXRjaCAoc291cmNlLmNvbnN0cnVjdG9yKSB7XG4gICAgY2FzZSBEYXRlOlxuICAgICAgY29uc3QgZGF0ZVZhbHVlID0gc291cmNlIGFzIERhdGU7XG4gICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZVZhbHVlLmdldFRpbWUoKSk7XG4gICAgY2FzZSBPYmplY3Q6XG4gICAgICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGFyZ2V0ID0ge307XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFycmF5OlxuICAgICAgdGFyZ2V0ID0gW107XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuICBmb3IgKGNvbnN0IGtleSBpbiBzb3VyY2UpIHtcbiAgICBpZiAoIXNvdXJjZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdGFyZ2V0W2tleV0gPSBkZWVwRXh0ZW5kKHRhcmdldFtrZXldLHNvdXJjZVtrZXldKTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59Il19